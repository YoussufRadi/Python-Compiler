package Compilers;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;


/* Terminals (tokens returned by the scanner). */
terminal			terminal			NL, INT, IND, KW, FOR, WH, IM, PK, FC, PR, FR, IFS, EI, TY, EX, CN, OR, NT, AD, TR, FL, RG, DF, CL, ID, DL, IN, ST, FI, NN, LM, GL, IS, YD, PS, RT, ELF, BR, DO, PO, MO, MB, DB, AO, LT, GT, EQ, LC, RC, LB, RB, SM, FA, AA, LS, RS, SC, UD, DED, ERROR;


/* Non-terminals */
nonterminal	Boolean		program, statement, import_stmnt, variable_stmnt, range_fn, for_stmnt, def_stmnt, params_def, params_def_help, params_fn, params_fn_help, bool_expr, while_stmnt, fn, fn_stmnt, value, def, list_item, empty_list, if_stmnt, rest, eval_expr, arth_op, variable, variable_help, bool_op, at_stmnt, try_stmnt, eval_expr_help, not_variable, if_stmnt2, if_stmnt3;

precedence left RB;
precedence left NL;
/* The grammar */


program ::= program:p statement:e
			{:RESULT = p && e;:}
			| {:RESULT = true;:};

statement ::= import_stmnt:s
			  {:RESULT = s;:}
				| variable_stmnt:b
				{:RESULT = b;:}
				| for_stmnt:fl
				{:RESULT = fl;:}
				| def_stmnt:ds
				{:RESULT = ds;:}
				| CN
				{:RESULT = true;:}
				| if_stmnt2:v
                {:RESULT = v;:}
				| if_stmnt3:v
                {:RESULT = v;:}
				| not_variable:v
				{:RESULT = v;:}
				| while_stmnt:ws
				{:RESULT = ws;:}
				| fn_stmnt:fc
				{:RESULT = fc;:}
				| if_stmnt:ifs
				{:RESULT = ifs;:}
				| at_stmnt:ats
				{:RESULT = ats;:}
				| try_stmnt:ty
				{:RESULT = ty;:}
				| NL
				{:RESULT = true;:}
				| error
				{:RESULT = false;:};

at_stmnt ::= ID DO fn:f
        {:RESULT = f;:};


arth_op ::= PO
        {:RESULT = true;:}
        | MO
        {:RESULT = true;:}
        | MB
        {:RESULT = true;:}
        | DB
        {:RESULT = true;:};

variable_help ::= value:v arth_op:o variable_help:v1
              {:RESULT = v && o && v1;:}
							| value:v arth_op:o fn:f
							{:RESULT = v && o && f;:}
							| fn:f arth_op:o value:v
							{:RESULT = v && o && f;:}
              | value:v
              {:RESULT = v;:};

variable ::= LB variable_help:h RB
                {:RESULT = h;:}
                | variable_help:h
                {:RESULT = h;:};

not_variable ::= ID AO NT variable:h
                {:RESULT = h;:};

// Note that AA is the empty list []
value ::= ST
        {:RESULT = true;:}
        | INT
        {:RESULT = true;:}
        | list_item
        {:RESULT = true;:}
        | AA
        {:RESULT = true;:}
        | ID
        {:RESULT = true;:}
        | TR
        {:RESULT = true;:}
        | FL
        {:RESULT = true;:};

rest ::= NL IND program:p DED
                {:RESULT = p;:};

list_item ::= ID LS variable:v RS
                {:RESULT = v;:};

import_stmnt ::= FR PK IM FC
				{:RESULT = true;:};

variable_stmnt ::= ID AO variable:v
				{:RESULT = v;:}
				| list_item:l AO variable:v
				{:RESULT = l && v;:}
				| ID AO fn:f
				{:RESULT = f;:};

range_fn ::= RG LB INT FA INT RB
                {:RESULT = true;:};

for_stmnt ::= FOR variable:v IN range_fn:g SC rest:r
				{:RESULT = r && g && v;:};


params_def_help ::= FA ID params_def_help:d
                {:RESULT = d;:}
                 | FA ID
                {:RESULT = true;:};

params_def ::= ID params_def_help:d
                {:RESULT = d;:}
                | ID
                {:RESULT = true;:};

params_fn_help ::= FA variable:v params_fn_help:fn
                {:RESULT = v && fn;:}
                | FA variable:v
                {:RESULT = v;:};

params_fn ::= variable:v params_fn_help:fn
                {:RESULT = v && fn;:}
                | variable:v
                {:RESULT = v;:};

fn ::= ID LB params_fn:f RB
                {:RESULT = f;:}
                | ID LB RB
                {:RESULT = true;:}
                | ID LB fn RB
                {:RESULT = true;:};

def ::= ID LB params_def RB
                {:RESULT = true;:}
                 | ID LB RB
                {:RESULT = true;:};

fn_stmnt ::= fn:f
			{:RESULT = f;:};

def_stmnt ::= DF def SC rest:r
				{:RESULT = r;:};

bool_expr ::= GT
                {:RESULT = true;:}
                | LT
                {:RESULT = true;:}
                | GT AO
                {:RESULT = true;:}
                | LT AO
                {:RESULT = true;:}
                | EQ
                {:RESULT = true;:};

bool_op ::= AD
        {:RESULT = true;:}
        | OR
        {:RESULT = true;:};

eval_expr_help ::= variable
            {:RESULT = true;:}
            | NT variable
            {:RESULT = true;:}
            | variable bool_expr:e variable
               {:RESULT = e;:};

eval_expr ::= eval_expr_help:e bool_op:o eval_expr_help:r
            {:RESULT = e && o && r;:}
            | eval_expr_help:e
            {:RESULT = e;:};

while_stmnt ::= WH eval_expr:e SC rest:r
				{:RESULT = e && r;:};

if_stmnt ::= IFS eval_expr SC rest:r
				{:RESULT = r;:}
			| IFS eval_expr:e SC rest:r NL EI SC rest:r1
             	{:RESULT =  e && r && r1;:};

if_stmnt2 ::= IFS LB eval_expr:e RB SC rest:r
				{:RESULT = e && r;:}
			| IFS LB eval_expr:e RB SC rest:r NL EI SC rest:r1
             	{:RESULT =  e && r && r1;:};

if_stmnt3 ::= IFS LB LB eval_expr:e RB bool_op:o LB eval_expr:e1 RB RB SC rest:r
				{:RESULT = e && r && o && e1;:}
			| IFS LB LB eval_expr:e RB bool_op:o LB eval_expr:e1 RB RB SC rest:r NL EI SC rest:r1
             	{:RESULT =  e && r && r1 && o && e1;:};

try_stmnt ::= TY SC rest:r EX SC rest:r1
               {:RESULT = r && r1;:};
