package Compilers;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;


/* Terminals (tokens returned by the scanner). */
terminal			terminal			INT, IND, KW, FOR, WH, IM, PK, FC, PR, FR, IFS, EI, TY, EX, CN, OR, NT, AD, TR, FL, RG, DF, CL, ID, DL, IN, ST, FI, NN, LM, GL, IS, YD, PS, RT, ELF, BR, DO, PO, MO, MB, DB, AO, LT, GT, EQ, LC, RC, LB, RB, SM, FA, AA, LS, RS, SC, UD, NL, DED, ERROR;


/* Non-terminals */
nonterminal	Boolean		program, statement, import_stmnt, variable_stmnt, range_fn, for_stmnt, def_stmnt, params_def, params_def_help, params_fn, params_fn_help, bool_expr, while_stmnt, fn, fn_stmnt, empty_stmnt, value, def, list_item, empty_list, if_stmnt, rest, eval_expr, arth_op, variable, variable_help, bool_op, at_stmnt;

/* The grammar */


program ::= program:p statement:e
			{:RESULT = p && e;:}
			| {:RESULT = true;:};

statement ::= import_stmnt:s
			  {:RESULT = s;:}
				| empty_stmnt:es
				{:RESULT = es;:}
				| variable_stmnt:b
				{:RESULT = b;:}
				| for_stmnt:fl
				{:RESULT = fl;:}
				| def_stmnt:ds
				{:RESULT = ds;:}
				| while_stmnt:ws
				{:RESULT = ws;:}
				| fn_stmnt:fc
				{:RESULT = fc;:}
				| if_stmnt:ifs
				{:RESULT = ifs;:}
				| at_stmnt:ats
				{:RESULT = ats;:}
				| error
				{:RESULT = false;:};

at_stmnt ::= ID DO fn_stmnt:f
             {:RESULT = f;:};


arth_op ::= PO | MO | MB | DB;

variable_help ::= value arth_op value | value;

variable ::= LB variable_help RB | variable_help;

// Note that AA is the empty list []
value ::= ST | INT | list_item | AA | ID | TR | FL;

rest ::= NL IND program:p NL DED
                {:RESULT = p;:};

list_item ::= ID LS variable RS;

import_stmnt ::= FR PK IM FC NL
				{:RESULT = true;:};

variable_stmnt ::= ID AO variable
				{:RESULT = true;:}
				| list_item AO variable
				{:RESULT = true;:};

range_fn ::= RG LB INT FA INT RB;

for_stmnt ::= FOR variable IN range_fn SC rest:r
				{:RESULT = r;:};


params_def_help ::= FA ID params_def_help | FA ID;

params_def ::= ID params_def_help | ID;

params_fn_help ::= FA variable params_fn_help | FA variable;

params_fn ::= variable params_fn_help | variable;

fn ::= ID LB params_fn RB | ID LB RB;

def ::= ID LB params_def RB | ID LB RB;

fn_stmnt ::= fn rest:r
				{:RESULT = r;:};

def_stmnt ::= DF def SC rest:r
				{:RESULT = r;:};

bool_expr ::= GT | LT | GT AO | LT AO | EQ;

bool_op ::= AD | OR;

eval_expr ::= variable
            | NT variable
            | variable bool_expr:e variable
               {:RESULT = e;:};

while_stmnt ::= WH eval_expr rest:r
				{:RESULT = r;:};

if_stmnt ::= IFS eval_expr SC rest:r
				{:RESULT = r;:}
			| IFS eval_expr SC rest:r EI SC rest
             	{:RESULT = r;:};

empty_stmnt ::= NL
				{:RESULT = true;:};