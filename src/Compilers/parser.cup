package Compilers;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;


/* Terminals (tokens returned by the scanner). */
terminal			terminal			INT, IND, KW, FOR, WH, IM, PK, FC, PR, FR, IFS, EI, TY, EX, CN, OR, NT, AD, TR, FL, RG, DF, CL, ID, DL, IN, ST, FI, NN, LM, GL, IS, YD, PS, RT, ELF, BR, DO, PO, MO, MB, DB, AO, LT, GT, EQ, LC, RC, LB, RB, SM, FA, AA, LS, RS, SC, UD, NL, DED, ERROR;


/* Non-terminals */
nonterminal	Boolean		program, statement, import_stmnt, variable_stmnt, range_fn, for_stmnt, def_stmnt, params_def, params_def_help, params_fn, params_fn_help, bool_expr, while_stmnt, fn, fn_stmnt, empty_stmnt, value, def, list_item, empty_list, if_stmnt, rest;

/* The grammar */


program ::= program:p statement:e
			{:RESULT = p && e;:}
			| {:RESULT = true;:};

statement ::= import_stmnt:s
			  {:RESULT = s;:}
				| empty_stmnt:es
				{:RESULT = es;:}
				| variable_stmnt:b
				{:RESULT = b;:}
				| for_stmnt:fl
				{:RESULT = fl;:}
				| def_stmnt:ds
				{:RESULT = ds;:}
				| while_stmnt:ws
				{:RESULT = ws;:}
				| fn_stmnt:fc
				{:RESULT = fc;:}
				| if_stmnt:ifs
				{:RESULT = ifs;:}
				| error
				{:RESULT = false;:};

// Note that AA is the empty list []
value ::= ST | INT | list_item | AA | ID | TR | FL;

rest ::= NL IND program:p NL DED
                {:RESULT = p;:};

if_stmnt ::= IFS ID SC rest:r
				{:RESULT = r;:};

list_item ::= ID LS INT RS;

import_stmnt ::= FR PK IM FC rest:r
				{:RESULT = r;:};

variable_stmnt ::= ID AO value
				{:RESULT = true;:};

range_fn ::= RG LB INT FA INT RB;

for_stmnt ::= FOR ID IN range_fn SC rest:r
				{:RESULT = r;:};

params_def_help ::= FA ID params_def_help | FA ID;

params_def ::= ID params_def_help | ID;

params_fn_help ::= FA value params_fn_help | FA value;

params_fn ::= value params_fn_help | value;

fn ::= ID LB params_fn RB | ID LB RB;

def ::= ID LB params_def RB | ID LB RB;

fn_stmnt ::= fn rest:r
				{:RESULT = r;:};

def_stmnt ::= DF def SC rest:r
				{:RESULT = r;:};

bool_expr ::= GT | LT | GT AO | LT AO;

while_stmnt ::= WH ID SC rest:r
				{:RESULT = r;:}
				| WH NT ID SC rest:r
				{:RESULT = r;:}
				| WH ID bool_expr ID SC rest:r
				{:RESULT = r;:}
				| WH ID bool_expr INT SC rest:r
				{:RESULT = r;:};

empty_stmnt ::= NL
				{:RESULT = true;:};