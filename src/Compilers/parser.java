
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 26 20:01:58 EET 2018
//----------------------------------------------------

package Compilers;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 26 20:01:58 EET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\033\005\000\002\033\003\000\002\032\005" +
    "\000\002\032\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\027\007\000\002\024" +
    "\006\000\002\004\007\000\002\005\005\000\002\005\005" +
    "\000\002\006\010\000\002\007\010\000\002\012\005\000" +
    "\002\012\004\000\002\011\004\000\002\011\003\000\002" +
    "\014\005\000\002\014\004\000\002\013\004\000\002\013" +
    "\003\000\002\017\006\000\002\017\005\000\002\023\006" +
    "\000\002\023\005\000\002\020\004\000\002\010\006\000" +
    "\002\015\003\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\034\003\000\002\034" +
    "\003\000\002\030\003\000\002\030\004\000\002\030\005" +
    "\000\002\016\005\000\002\026\006\000\002\026\011\000" +
    "\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\024\002\uffff\003\uffff\007\uffff\010\uffff\015" +
    "\uffff\016\uffff\031\uffff\033\uffff\075\uffff\001\002\000\024" +
    "\002\022\003\024\007\025\010\005\015\006\016\017\031" +
    "\023\033\016\075\027\001\002\000\022\004\031\024\113" +
    "\026\032\027\033\033\041\036\036\064\042\070\037\001" +
    "\002\000\004\012\151\001\002\000\024\002\001\003\001" +
    "\007\001\010\001\015\001\016\001\031\001\033\001\075" +
    "\001\001\002\000\024\002\ufffd\003\ufffd\007\ufffd\010\ufffd" +
    "\015\ufffd\016\ufffd\031\ufffd\033\ufffd\075\ufffd\001\002\000" +
    "\004\056\147\001\002\000\024\002\ufffe\003\ufffe\007\ufffe" +
    "\010\ufffe\015\ufffe\016\ufffe\031\ufffe\033\ufffe\075\ufffe\001" +
    "\002\000\024\002\ufffb\003\ufffb\007\ufffb\010\ufffb\015\ufffb" +
    "\016\ufffb\031\ufffb\033\ufffb\075\ufffb\001\002\000\024\002" +
    "\ufff9\003\ufff9\007\ufff9\010\ufff9\015\ufff9\016\ufff9\031\ufff9" +
    "\033\ufff9\075\ufff9\001\002\000\004\075\063\001\002\000" +
    "\010\056\133\064\134\071\054\001\002\000\022\004\031" +
    "\024\113\026\032\027\033\033\041\036\036\064\042\070" +
    "\037\001\002\000\024\002\ufffc\003\ufffc\007\ufffc\010\ufffc" +
    "\015\ufffc\016\ufffc\031\ufffc\033\ufffc\075\ufffc\001\002\000" +
    "\024\002\ufffa\003\ufffa\007\ufffa\010\ufffa\015\ufffa\016\ufffa" +
    "\031\ufffa\033\ufffa\075\ufffa\001\002\000\004\002\000\001" +
    "\002\000\004\033\076\001\002\000\024\002\ufff6\003\ufff6" +
    "\007\ufff6\010\ufff6\015\ufff6\016\ufff6\031\ufff6\033\ufff6\075" +
    "\ufff6\001\002\000\020\004\031\026\032\027\033\033\041" +
    "\036\036\064\042\070\037\001\002\000\024\002\ufff8\003" +
    "\ufff8\007\ufff8\010\ufff8\015\ufff8\016\ufff8\031\ufff8\033\ufff8" +
    "\075\ufff8\001\002\000\024\002\uffc4\003\uffc4\007\uffc4\010" +
    "\uffc4\015\uffc4\016\uffc4\031\uffc4\033\uffc4\075\uffc4\001\002" +
    "\000\024\002\ufff7\003\ufff7\007\ufff7\010\ufff7\015\ufff7\016" +
    "\ufff7\031\ufff7\033\ufff7\075\ufff7\001\002\000\054\002\uffec" +
    "\003\uffec\007\uffec\010\uffec\015\uffec\016\uffec\031\uffec\033" +
    "\uffec\035\uffec\052\uffec\053\uffec\054\uffec\055\uffec\057\uffec" +
    "\060\uffec\061\uffec\065\uffec\067\uffec\072\uffec\073\uffec\075" +
    "\uffec\001\002\000\054\002\uffe8\003\uffe8\007\uffe8\010\uffe8" +
    "\015\uffe8\016\uffe8\031\uffe8\033\uffe8\035\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\057\uffe8\060\uffe8\061\uffe8\065\uffe8" +
    "\067\uffe8\072\uffe8\073\uffe8\075\uffe8\001\002\000\054\002" +
    "\uffe7\003\uffe7\007\uffe7\010\uffe7\015\uffe7\016\uffe7\031\uffe7" +
    "\033\uffe7\035\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\065\uffe7\067\uffe7\072\uffe7\073\uffe7" +
    "\075\uffe7\001\002\000\004\035\057\001\002\000\044\002" +
    "\uffee\003\uffee\007\uffee\010\uffee\015\uffee\016\uffee\031\uffee" +
    "\033\uffee\035\uffee\057\uffee\060\uffee\061\uffee\065\uffee\067" +
    "\uffee\072\uffee\073\uffee\075\uffee\001\002\000\054\002\uffed" +
    "\003\uffed\007\uffed\010\uffed\015\uffed\016\uffed\031\uffed\033" +
    "\uffed\035\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057\uffed" +
    "\060\uffed\061\uffed\065\uffed\067\uffed\072\uffed\073\uffed\075" +
    "\uffed\001\002\000\054\002\uffea\003\uffea\007\uffea\010\uffea" +
    "\015\uffea\016\uffea\031\uffea\033\uffea\035\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\057\uffea\060\uffea\061\uffea\065\uffea" +
    "\067\uffea\072\uffea\073\uffea\075\uffea\001\002\000\054\002" +
    "\uffeb\003\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb\031\uffeb" +
    "\033\uffeb\035\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\065\uffeb\067\uffeb\072\uffeb\073\uffeb" +
    "\075\uffeb\001\002\000\056\002\uffe9\003\uffe9\007\uffe9\010" +
    "\uffe9\015\uffe9\016\uffe9\031\uffe9\033\uffe9\035\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\057\uffe9\060\uffe9\061\uffe9\065" +
    "\uffe9\067\uffe9\071\054\072\uffe9\073\uffe9\075\uffe9\001\002" +
    "\000\016\004\031\026\032\027\033\033\041\036\036\070" +
    "\037\001\002\000\054\002\ufff0\003\ufff0\007\ufff0\010\ufff0" +
    "\015\ufff0\016\ufff0\031\ufff0\033\ufff0\035\ufff0\052\045\053" +
    "\047\054\050\055\046\057\ufff0\060\ufff0\061\ufff0\065\ufff0" +
    "\067\ufff0\072\ufff0\073\ufff0\075\ufff0\001\002\000\016\004" +
    "\031\026\032\027\033\033\041\036\036\070\037\001\002" +
    "\000\016\004\ufff5\026\ufff5\027\ufff5\033\ufff5\036\ufff5\070" +
    "\ufff5\001\002\000\016\004\ufff2\026\ufff2\027\ufff2\033\ufff2" +
    "\036\ufff2\070\ufff2\001\002\000\016\004\ufff4\026\ufff4\027" +
    "\ufff4\033\ufff4\036\ufff4\070\ufff4\001\002\000\016\004\ufff3" +
    "\026\ufff3\027\ufff3\033\ufff3\036\ufff3\070\ufff3\001\002\000" +
    "\044\002\ufff1\003\ufff1\007\ufff1\010\ufff1\015\ufff1\016\ufff1" +
    "\031\ufff1\033\ufff1\035\ufff1\057\ufff1\060\ufff1\061\ufff1\065" +
    "\ufff1\067\ufff1\072\ufff1\073\ufff1\075\ufff1\001\002\000\004" +
    "\065\053\001\002\000\044\002\uffef\003\uffef\007\uffef\010" +
    "\uffef\015\uffef\016\uffef\031\uffef\033\uffef\035\uffef\057\uffef" +
    "\060\uffef\061\uffef\065\uffef\067\uffef\072\uffef\073\uffef\075" +
    "\uffef\001\002\000\020\004\031\026\032\027\033\033\041" +
    "\036\036\064\042\070\037\001\002\000\004\072\056\001" +
    "\002\000\056\002\uffe5\003\uffe5\007\uffe5\010\uffe5\015\uffe5" +
    "\016\uffe5\031\uffe5\033\uffe5\035\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\065\uffe5" +
    "\067\uffe5\072\uffe5\073\uffe5\075\uffe5\001\002\000\004\030" +
    "\060\001\002\000\004\064\071\001\002\000\004\073\062" +
    "\001\002\000\004\075\063\001\002\000\004\005\065\001" +
    "\002\000\024\002\uffe0\003\uffe0\007\uffe0\010\uffe0\015\uffe0" +
    "\016\uffe0\031\uffe0\033\uffe0\075\uffe0\001\002\000\022\003" +
    "\uffff\007\uffff\010\uffff\015\uffff\016\uffff\031\uffff\033\uffff" +
    "\075\uffff\001\002\000\022\003\024\007\025\010\005\015" +
    "\006\016\017\031\023\033\016\075\067\001\002\000\024" +
    "\003\uffc4\007\uffc4\010\uffc4\015\uffc4\016\uffc4\031\uffc4\033" +
    "\uffc4\075\uffc4\076\070\001\002\000\026\002\uffe6\003\uffe6" +
    "\007\uffe6\010\uffe6\015\uffe6\016\uffe6\017\uffe6\031\uffe6\033" +
    "\uffe6\075\uffe6\001\002\000\020\004\031\026\032\027\033" +
    "\033\041\036\036\064\042\070\037\001\002\000\004\067" +
    "\073\001\002\000\020\004\031\026\032\027\033\033\041" +
    "\036\036\064\042\070\037\001\002\000\004\065\075\001" +
    "\002\000\004\073\uffe1\001\002\000\004\064\102\001\002" +
    "\000\004\073\100\001\002\000\004\075\063\001\002\000" +
    "\024\002\uffd2\003\uffd2\007\uffd2\010\uffd2\015\uffd2\016\uffd2" +
    "\031\uffd2\033\uffd2\075\uffd2\001\002\000\006\033\103\065" +
    "\105\001\002\000\006\065\uffdc\067\110\001\002\000\004" +
    "\065\106\001\002\000\004\073\uffd4\001\002\000\004\073" +
    "\uffd5\001\002\000\004\065\uffdd\001\002\000\004\033\111" +
    "\001\002\000\006\065\uffde\067\110\001\002\000\004\065" +
    "\uffdf\001\002\000\020\004\031\026\032\027\033\033\041" +
    "\036\036\064\042\070\037\001\002\000\014\057\123\060" +
    "\125\061\124\073\uffca\075\uffca\001\002\000\004\073\116" +
    "\001\002\000\004\075\063\001\002\000\026\002\uffc6\003" +
    "\uffc6\007\uffc6\010\uffc6\015\uffc6\016\uffc6\017\120\031\uffc6" +
    "\033\uffc6\075\uffc6\001\002\000\004\073\121\001\002\000" +
    "\004\075\063\001\002\000\024\002\uffc5\003\uffc5\007\uffc5" +
    "\010\uffc5\015\uffc5\016\uffc5\031\uffc5\033\uffc5\075\uffc5\001" +
    "\002\000\022\004\uffd0\026\uffd0\027\uffd0\033\uffd0\036\uffd0" +
    "\056\131\064\uffd0\070\uffd0\001\002\000\020\004\uffcd\026" +
    "\uffcd\027\uffcd\033\uffcd\036\uffcd\064\uffcd\070\uffcd\001\002" +
    "\000\022\004\uffd1\026\uffd1\027\uffd1\033\uffd1\036\uffd1\056" +
    "\130\064\uffd1\070\uffd1\001\002\000\020\004\031\026\032" +
    "\027\033\033\041\036\036\064\042\070\037\001\002\000" +
    "\006\073\uffc8\075\uffc8\001\002\000\020\004\uffcf\026\uffcf" +
    "\027\uffcf\033\uffcf\036\uffcf\064\uffcf\070\uffcf\001\002\000" +
    "\020\004\uffce\026\uffce\027\uffce\033\uffce\036\uffce\064\uffce" +
    "\070\uffce\001\002\000\006\073\uffc9\075\uffc9\001\002\000" +
    "\020\004\031\026\032\027\033\033\041\036\036\064\042" +
    "\070\037\001\002\000\022\004\031\026\032\027\033\033" +
    "\041\036\036\064\042\065\137\070\037\001\002\000\006" +
    "\065\uffd8\067\141\001\002\000\004\065\140\001\002\000" +
    "\004\075\uffd6\001\002\000\004\075\uffd7\001\002\000\020" +
    "\004\031\026\032\027\033\033\041\036\036\064\042\070" +
    "\037\001\002\000\004\065\uffd9\001\002\000\006\065\uffda" +
    "\067\141\001\002\000\004\065\uffdb\001\002\000\024\002" +
    "\uffe3\003\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\031\uffe3" +
    "\033\uffe3\075\uffe3\001\002\000\024\002\uffd3\003\uffd3\007" +
    "\uffd3\010\uffd3\015\uffd3\016\uffd3\031\uffd3\033\uffd3\075\uffd3" +
    "\001\002\000\020\004\031\026\032\027\033\033\041\036" +
    "\036\064\042\070\037\001\002\000\024\002\uffe2\003\uffe2" +
    "\007\uffe2\010\uffe2\015\uffe2\016\uffe2\031\uffe2\033\uffe2\075" +
    "\uffe2\001\002\000\004\011\152\001\002\000\004\013\153" +
    "\001\002\000\004\075\063\001\002\000\024\002\uffe4\003" +
    "\uffe4\007\uffe4\010\uffe4\015\uffe4\016\uffe4\031\uffe4\033\uffe4" +
    "\075\uffe4\001\002\000\004\075\063\001\002\000\024\002" +
    "\uffc7\003\uffc7\007\uffc7\010\uffc7\015\uffc7\016\uffc7\031\uffc7" +
    "\033\uffc7\075\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\002\003\001\001\000\030\003\006\004" +
    "\011\005\017\007\012\010\020\016\013\017\014\020\025" +
    "\021\007\024\010\026\027\001\001\000\014\022\042\024" +
    "\037\030\154\032\113\033\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\145\001\001\000\002\001\001\000\014\022\042\024" +
    "\037\030\114\032\113\033\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\076\001" +
    "\001\000\002\001\001\000\012\022\042\024\037\032\033" +
    "\033\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\042\024\037\033\051\001\001\000\004\031" +
    "\043\001\001\000\006\022\050\024\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\042\024\037\032\054\033\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\065" +
    "\001\001\000\030\003\006\004\011\005\017\007\012\010" +
    "\020\016\013\017\014\020\025\021\007\024\010\026\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\042\024\037\032\071\033\034\001\001\000\002\001\001" +
    "\000\012\022\042\024\037\032\073\033\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\100\001\001\000\002\001\001\000" +
    "\004\011\103\001\001\000\004\012\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\111\001\001\000\002" +
    "\001\001\000\012\022\042\024\037\032\131\033\034\001" +
    "\001\000\004\015\125\001\001\000\002\001\001\000\004" +
    "\027\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\042\024" +
    "\037\032\126\033\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\042\024\037\032\144\033\034\001\001\000\014\013\135" +
    "\022\042\024\037\032\134\033\034\001\001\000\004\014" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\042\024\037\032\142\033\034\001" +
    "\001\000\002\001\001\000\004\014\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\042\024\037\032\147\033\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\153\001" +
    "\001\000\002\001\001\000\004\027\155\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // empty_stmnt ::= NL 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty_stmnt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_stmnt ::= IFS eval_expr SC rest EI SC rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_stmnt ::= IFS eval_expr SC rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while_stmnt ::= WH eval_expr rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmnt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // eval_expr ::= variable bool_expr variable 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // eval_expr ::= NT variable 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // eval_expr ::= variable 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_op ::= OR 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_op ::= AD 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_expr ::= EQ 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_expr ::= LT AO 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_expr ::= GT AO 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_expr ::= LT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_expr ::= GT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // def_stmnt ::= DF def SC rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_stmnt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fn_stmnt ::= fn rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fn_stmnt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // def ::= ID LB RB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // def ::= ID LB params_def RB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fn ::= ID LB RB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fn",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fn ::= ID LB params_fn RB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fn",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // params_fn ::= variable 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_fn",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // params_fn ::= variable params_fn_help 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_fn",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // params_fn_help ::= FA variable 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_fn_help",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params_fn_help ::= FA variable params_fn_help 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_fn_help",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params_def ::= ID 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_def",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params_def ::= ID params_def_help 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_def",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params_def_help ::= FA ID 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_def_help",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params_def_help ::= FA ID params_def_help 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_def_help",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // for_stmnt ::= FOR variable IN range_fn SC rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmnt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // range_fn ::= RG LB variable FA variable RB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("range_fn",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable_stmnt ::= list_item AO variable 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_stmnt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_stmnt ::= ID AO variable 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_stmnt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // import_stmnt ::= FR PK IM FC rest 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_stmnt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list_item ::= ID LS variable RS 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_item",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rest ::= NL IND program NL DED 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rest",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= FL 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= TR 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // value ::= ID 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= AA 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // value ::= list_item 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= INT 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= ST 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable ::= variable_help 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable ::= LB variable_help RB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_help ::= value 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_help",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_help ::= value arth_op value 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_help",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arth_op ::= DB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arth_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arth_op ::= MB 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arth_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arth_op ::= MO 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arth_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arth_op ::= PO 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arth_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= error 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_stmnt 
            {
              Boolean RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ifs = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ifs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= fn_stmnt 
            {
              Boolean RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean fc = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = fc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= while_stmnt 
            {
              Boolean RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ws = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ws;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= def_stmnt 
            {
              Boolean RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ds = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for_stmnt 
            {
              Boolean RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean fl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = fl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= variable_stmnt 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= empty_stmnt 
            {
              Boolean RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean es = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = es;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= import_stmnt 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean start_val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program statement 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p && e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

