
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Apr 23 20:21:10 EET 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Mon Apr 23 20:21:10 EET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\003\004\000\002\002\004\000\002\003" +
    "\002\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\006\000\002\006\005\000\002" +
    "\006\005\000\002\007\010\000\002\010\007\000\002\013" +
    "\005\000\002\013\004\000\002\012\004\000\002\012\003" +
    "\000\002\017\006\000\002\017\005\000\002\020\003\000" +
    "\002\011\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\004\000\002\015\005\000\002\015" +
    "\006\000\002\015\007\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\020\002\uffff\003\uffff\007\uffff\010\uffff\015" +
    "\uffff\031\uffff\033\uffff\001\002\000\020\002\013\003\017" +
    "\007\006\010\014\015\005\031\012\033\015\001\002\000" +
    "\004\012\073\001\002\000\004\033\061\001\002\000\020" +
    "\002\ufffd\003\ufffd\007\ufffd\010\ufffd\015\ufffd\031\ufffd\033" +
    "\ufffd\001\002\000\020\002\ufffc\003\ufffc\007\ufffc\010\ufffc" +
    "\015\ufffc\031\ufffc\033\ufffc\001\002\000\020\002\ufffe\003" +
    "\ufffe\007\ufffe\010\ufffe\015\ufffe\031\ufffe\033\ufffe\001\002" +
    "\000\004\033\056\001\002\000\004\002\000\001\002\000" +
    "\006\024\041\033\040\001\002\000\006\056\024\064\025" +
    "\001\002\000\020\002\001\003\001\007\001\010\001\015" +
    "\001\031\001\033\001\001\002\000\020\002\ufff8\003\ufff8" +
    "\007\ufff8\010\ufff8\015\ufff8\031\ufff8\033\ufff8\001\002\000" +
    "\020\002\ufffa\003\ufffa\007\ufffa\010\ufffa\015\ufffa\031\ufffa" +
    "\033\ufffa\001\002\000\020\002\uffec\003\uffec\007\uffec\010" +
    "\uffec\015\uffec\031\uffec\033\uffec\001\002\000\020\002\ufffb" +
    "\003\ufffb\007\ufffb\010\ufffb\015\ufffb\031\ufffb\033\ufffb\001" +
    "\002\000\020\002\ufff9\003\ufff9\007\ufff9\010\ufff9\015\ufff9" +
    "\031\ufff9\033\ufff9\001\002\000\006\026\036\027\037\001" +
    "\002\000\006\033\026\065\030\001\002\000\006\065\uffef" +
    "\067\033\001\002\000\004\065\031\001\002\000\022\002" +
    "\uffed\003\uffed\007\uffed\010\uffed\015\uffed\031\uffed\033\uffed" +
    "\073\uffed\001\002\000\022\002\uffee\003\uffee\007\uffee\010" +
    "\uffee\015\uffee\031\uffee\033\uffee\073\uffee\001\002\000\004" +
    "\065\ufff0\001\002\000\004\033\034\001\002\000\006\065" +
    "\ufff1\067\033\001\002\000\004\065\ufff2\001\002\000\020" +
    "\002\ufff6\003\ufff6\007\ufff6\010\ufff6\015\ufff6\031\ufff6\033" +
    "\ufff6\001\002\000\020\002\ufff5\003\ufff5\007\ufff5\010\ufff5" +
    "\015\ufff5\031\ufff5\033\ufff5\001\002\000\010\057\044\060" +
    "\045\073\047\001\002\000\004\033\042\001\002\000\004" +
    "\073\043\001\002\000\020\002\uffe5\003\uffe5\007\uffe5\010" +
    "\uffe5\015\uffe5\031\uffe5\033\uffe5\001\002\000\010\004\uffe9" +
    "\033\uffe9\056\055\001\002\000\010\004\uffea\033\uffea\056" +
    "\054\001\002\000\006\004\051\033\050\001\002\000\020" +
    "\002\uffe6\003\uffe6\007\uffe6\010\uffe6\015\uffe6\031\uffe6\033" +
    "\uffe6\001\002\000\004\073\053\001\002\000\004\073\052" +
    "\001\002\000\020\002\uffe3\003\uffe3\007\uffe3\010\uffe3\015" +
    "\uffe3\031\uffe3\033\uffe3\001\002\000\020\002\uffe4\003\uffe4" +
    "\007\uffe4\010\uffe4\015\uffe4\031\uffe4\033\uffe4\001\002\000" +
    "\006\004\uffe8\033\uffe8\001\002\000\006\004\uffe7\033\uffe7" +
    "\001\002\000\004\064\025\001\002\000\004\073\060\001" +
    "\002\000\020\002\uffeb\003\uffeb\007\uffeb\010\uffeb\015\uffeb" +
    "\031\uffeb\033\uffeb\001\002\000\004\035\062\001\002\000" +
    "\004\030\063\001\002\000\004\064\066\001\002\000\004" +
    "\073\065\001\002\000\020\002\ufff3\003\ufff3\007\ufff3\010" +
    "\ufff3\015\ufff3\031\ufff3\033\ufff3\001\002\000\004\004\067" +
    "\001\002\000\004\067\070\001\002\000\004\004\071\001" +
    "\002\000\004\065\072\001\002\000\004\073\ufff4\001\002" +
    "\000\004\011\074\001\002\000\004\013\075\001\002\000" +
    "\020\002\ufff7\003\ufff7\007\ufff7\010\ufff7\015\ufff7\031\ufff7" +
    "\033\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\003\003\001\001\000\022\004\015\005" +
    "\010\006\006\010\007\011\021\015\017\017\020\020\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\026\001\001\000\004\013\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while_stmnt ::= WH ID bool_expr INT SC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // while_stmnt ::= WH ID bool_expr ID SC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // while_stmnt ::= WH NT ID SC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while_stmnt ::= WH ID SC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= LT AO 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= GT AO 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= LT 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= GT 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_stmnt ::= DF fn SC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*def_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fn_call ::= fn 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fn_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fn ::= ID LB RB 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*fn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fn ::= ID LB params RB 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*fn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // params ::= ID 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // params ::= ID params_help 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // params_help ::= FA ID 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*params_help*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // params_help ::= FA ID params_help 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*params_help*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // for_stmnt ::= FOR ID IN range_fn SC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*for_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // range_fn ::= RG LB INT FA INT RB 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*range_fn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool_stmnt ::= ID AO FL 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*bool_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bool_stmnt ::= ID AO TR 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*bool_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_stmnt ::= FR PK IM FC 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*import_stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= error 
            {
              Boolean RESULT = null;
		RESULT = false;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= fn_call 
            {
              Boolean RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean fc = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = fc;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= while_stmnt 
            {
              Boolean RESULT = null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ws = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ws;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= def_stmnt 
            {
              Boolean RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ds = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ds;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= for_stmnt 
            {
              Boolean RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean fl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = fl;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= bool_stmnt 
            {
              Boolean RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = b;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= import_stmnt 
            {
              Boolean RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = s;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean start_val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program statement 
            {
              Boolean RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = p && e;
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

